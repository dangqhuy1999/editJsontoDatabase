
1.Intro: 
Run server
	python3 manage.py runserver
initialize new app
	python3 manage.py startapp newapp

https://www.rosehosting.com/blog/how-to-create-a-python-virtual-environment-on-ubuntu-20-04/

2.MODELS: Build database for survey app
	models is refference between python with database
	Event on_delete=models.CASCADE when question is deleted choice will be delete.
	Create Migration point to folder contain manager.py: "python manage.py makemigrations"
	Create DATABASE from Migration: python manage.py migrate
	Import models into database: "python manage.py shell"
		from polls.models import Question
		Question.objects.all()
		from django.utils import timezone
		timezone.now()
		t = timezone.now()
		q = Question(question_text="what color do you like?", time_pub=t)
		q
		q.save()
		q.id
		q.question_text
		q.time_pub
		from polls.models import Choice
		c = Choice(question=q, choice_text="do", vote=0)
		c.save()
3.Admin site:
	turnoff server
	Create account adminuser in admin/ : "python manage.py createsuperuser"
	turn on server
	login, create new user, permission..
	Add, Modify, delete models by Registry on polls/admin
	
4.Templates part1:
	is a sample html
	Create a template of application .polls/template/polls/index.html
	<html>
		<head>
		
		</head>
		
		<body>
			Hello you guys TEMPLATES. My name is <b>{{name}}</b><h2> hihihi</h2>
		<ul>
			{% for item in asset %}
					{% if item != 5 %}
						<li>{{item}}</li>
					{% endif %}
			% endfor %}
		</ul>
		</body>
	</html>
	Referrence DICTIONARY(json) type, loop for, if in html to index.html	
	
5.Template part2:
	Template static,dynamic {% block %}
	index.html
	{% extends 'polls/base.html' %}
{% block content %}
		Hello you guys TEMPLATES. My name is <b>{{name}}</b><h2> hihihi</h2>
		<ul>
			{% for item in asset %}
				{% if item != 5 %}
					<li>{{item}}</li>
				{% endif %}
			{% endfor %}
		</ul>
{% endblock %}
#############
	base.html
	<html>
		<head>
			<style>
				.header{
					padding: 30px;
					background-color: #CCC;
					color: #FFF
				}
			</style>
		</head>
		
		<body>
			<div class="header">
				
			</div>
			<div class="menu">
				<ul>
					<li>Link 1</li>
					<li>Link 2</li>
					<li>Link 3</li>
					<li>Link 4</li>
				</ul>
			</div>
		</body>
	</html>
	<html>
		<head>
		
		</head>
		
		<body>
			Hello you guys TEMPLATES. My name is <b>{{name}}</b><h2> hihihi</h2>
			<ul>
				{% for item in asset %}
					{% if item != 5 %}
						<li>{{item}}</li>
					{% endif %}
				{% endfor %}
			</ul>
		</body>
	</html>

7.Template part 3:
	Query objects: get elements in database print to views
	diango 2.2 => django 5.0.1 
	INSTALLED_APPS = [
    # ...
    'corsheaders',
    # ...
]
Thêm middleware CorsMiddleware vào danh sách MIDDLEWARE trong tệp settings.py:
python
Copier
MIDDLEWARE = [
    # ...
    'corsheaders.middleware.CorsMiddleware',
    # ...
]
Cấu hình các thiết lập CORS bằng cách thêm các cài đặt sau vào tệp settings.py:
python
Copier
CORS_ALLOWED_ORIGINS = [
    'http://127.0.0.1:8000',
]
Bạn có thể thay đổi giá trị 'http://127.0.0.1:8000' bằng nguồn gốc (origin) của trang web của bạn.

Nếu bạn cần cho phép các phương thức HTTP khác nhau, như PUT, DELETE, PATCH, vv., bạn có thể thêm các thiết lập CORS sau:
python
Copier
CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS'
]
Khởi động lại máy chủ Django để áp dụng các thay đổi.

############
ĐỂ CẤU HÌNH URL VÀ VIEW TRONG DJANGO ĐỂ SỬ DỤNG FETCH VÀ GỌI MỘT URL CÓ CHỨA TỆP JSON, BẠN CÓ THỂ LÀM NHƯ SAU:
 
	Để cấu hình URL và view trong Django để sử dụng fetch và gọi một URL có chứa tệp JSON, bạn có thể làm như sau:

	Cấu hình URL:

	Trong file urls.py của ứng dụng Django, thêm một đường dẫn (URL pattern) để ánh xạ yêu cầu từ JavaScript đến view tương ứng. Ví dụ:
	python
	Copier
	from django.urls import path
	from . import views

	urlpatterns = [
		path('my-json-data/', views.my_json_data_view, name='my-json-data'),
	]
	Trong ví dụ trên, /my-json-data/ là đường dẫn URL mà bạn muốn gọi từ JavaScript để lấy dữ liệu JSON.

	Cấu hình view:

	Trong file views.py của ứng dụng Django, định nghĩa view để xử lý yêu cầu và trả về dữ liệu JSON. Ví dụ:
	python
	Copier
	from django.http import JsonResponse

	def my_json_data_view(request):
		data = {
			'name': 'John',
			'age': 25,
			'city': 'New York'
		}
		return JsonResponse(data)
	Trong ví dụ trên, my_json_data_view là tên view được gọi khi yêu cầu đến URL /my-json-data/. Trong view này, chúng ta định nghĩa một đối tượng JSON data và trả về dữ liệu JSON bằng phương thức JsonResponse.

	Sử dụng fetch trong JavaScript:

	Trong mã JavaScript, bạn có thể sử dụng fetch để gọi URL /my-json-data/ và nhận dữ liệu JSON từ server. Ví dụ:
	javascript
	Copier
	fetch('/my-json-data/')
		.then(response => response.json())
		.then(data => {
			// Xử lý dữ liệu JSON ở đây
			console.log(data);
		})
		.catch(error => {
			// Xử lý lỗi ở đây
			console.error(error);
		});
	Trong ví dụ trên, chúng ta sử dụng fetch để gửi yêu cầu GET đến URL /my-json-data/. Sau đó, chúng ta chuyển đổi phản hồi thành đối tượng JSON bằng phương thức json(). Cuối cùng, chúng ta xử lý dữ liệu JSON hoặc xử lý lỗi nếu có.

################
AH, NẾU BẠN ĐANG MUỐN XỬ LÝ URL VỚI MỐI QUAN HỆ CHA-CON TRONG DJANGO, BẠN CÓ THỂ SỬ DỤNG CÁC URL PATTERNS ĐỂ XÁC ĐỊNH CÁC MẪU URL CON THEO CẤU TRÚC PHÂN CẤP. DƯỚI ĐÂY LÀ MỘT VÍ DỤ ĐỂ GIÚP BẠN HIỂU RÕ HƠN:
	Trong file urls.py của ứng dụng Django của bạn, bạn cần import module include từ django.urls.

	python
	Copier
	from django.urls import path, include
	Tiếp theo, bạn có thể tạo ra các URL patterns cho các view con trong ứng dụng của bạn.

	python
	Copier
	urlpatterns = [
		path('parent/', include([
			path('', views.parent_view, name='parent'),
			path('child/', views.child_view, name='child'),
		])),
	]
	Trong ví dụ trên, chúng ta định nghĩa một URL pattern với đường dẫn 'parent/'. Đường dẫn này sẽ là cha của các URL con. Bên trong include(), chúng ta định nghĩa hai URL patterns khác nhau: một cho view cha parent_view với đường dẫn rỗng (''), và một cho view con child_view với đường dẫn 'child/'. Điều này tạo ra một cấu trúc URL phân cấp với URL cha là 'parent/' và URL con là 'parent/child/'.

	Trong views của bạn, bạn có thể định nghĩa các view tương ứng với các URL patterns.

	python
	Copier
	def parent_view(request):
		# Xử lý logic cho view cha ở đây
		return HttpResponse("This is the parent view")

	def child_view(request):
		# Xử lý logic cho view con ở đây
		return HttpResponse("This is the child view")
	Trong ví dụ trên, chúng ta đơn giản chỉ trả về một phản hồi văn bản cho mỗi view.

	Bây giờ, khi bạn truy cập vào URL 'parent/', Django sẽ gọi view parent_view và trả về phản hồi "This is the parent view". Tương tự, khi bạn truy cập vào URL 'parent/child/', Django sẽ gọi view child_view và trả về phản hồi "This is the child view".

#####################
SETTING CKEDITOR UPLOAD IMAGES in CDN DJANGO
	settings.py
	CKEDITOR_UPLOAD_PATH = "uploads/"
	STATIC_URL = '/static/'
	STATIC_ROOT = 'static/'
	MEDIA_URL = '/media/'
	MEDIA_ROOT = 'media/'
#####################
SETTING CKEDITOR UPLOAD IMAGES CDN in VIEWS DJANGO, intergrate along with HTML file.
Nếu bạn đã tích hợp CKEditor vào HTML của mình bằng mã JavaScript như bạn đã đề cập, bạn có thể làm như sau để tải lên hình ảnh từ CKEditor:

Tạo một view Django để xử lý việc tải lên hình ảnh:

//
settings.py
	STATIC_URL = '/static/'
	STATIC_ROOT = 'static/'
	MEDIA_URL = '/media/'
	MEDIA_ROOT = 'media/'
//
Trong file views.py, tạo một view để xử lý việc tải lên hình ảnh từ CKEditor:
views.py
def upload_image(request):
    if request.method == 'POST' and request.FILES.get('upload'):
        image = request.FILES['upload']
        # Lưu trữ hình ảnh trong thư mục tải lên trên máy chủ
        upload_path = os.path.join(settings.MEDIA_ROOT, 'uploads')
        if not os.path.exists(upload_path):
            os.makedirs(upload_path)
        image_path = os.path.join(upload_path, image.name)
        with open(image_path, 'wb') as f:
            for chunk in image.chunks():
                f.write(chunk)
        
        # Trả về URL của hình ảnh đã tải lên
        image_url = settings.MEDIA_URL + 'uploads/' + image.name
        return JsonResponse({'url': image_url})
    
    return JsonResponse({'error': 'Invalid request'})



Trong view trên, chúng ta xử lý việc tải lên hình ảnh từ CKEditor. Bạn cần thay đổi phần xử lý lưu trữ hình ảnh vào CDN tại dòng mã được chú thích bằng mã xử lý tương ứng cho CDN bạn đang sử dụng. Sau đó, trả về URL của hình ảnh đã tải lên dưới dạng JSON.

Cấu hình URL cho việc tải lên hình ảnh:
//
Trong file urls.py, thêm đường dẫn URL để xử lý việc tải lên hình ảnh từ CKEditor:
urls.py
from . import views

urlpatterns = [
    # ...
    path('ckeditor/upload/', views.upload_image, name='ckeditor_upload'),
]

Trong ví dụ trên, chúng ta đã thêm một URL với đường dẫn 'ckeditor/upload/' để xử lý việc tải lên hình ảnh từ CKEditor. Bạn cần cập nhật đường dẫn URL tương ứng với cấu hình của mình.

//
Xử lý sự kiện tải lên hình ảnh trong CKEditor:

Trong mã JavaScript của bạn, bạn cần xử lý sự kiện tải lên hình ảnh từ CKEditor. Bạn có thể sử dụng phương thức editor.plugins.get('FileRepository').createUploadAdapter() để xác định cách tải lên hình ảnh và cấu hình endpoint URL tải lên hình ảnh. Dưới đây là một ví dụ:

javascript
Copier
ClassicEditor
    .create(document.querySelector('#editor'), {
        // Cấu hình tải lên hình ảnh
        ckfinder: {
            uploadUrl: '/ckeditor/upload/'  // Đường dẫn URL đến view Django để xử lý tải lên hình ảnh
        }
    })
    .then(editor => {
        console.log('Editor was initialized', editor);
    })
    .catch(error => {
        console.error(error.stack);
    });
Trong ví dụ trên, chúng ta đã cấu hình uploadUrl trong ckfinder để trỏ đến đường dẫn URL của view Django đã tạo trong bước trước.

Cập nhật template để sử dụng CKEditor:

Trong template của bạn, hãy đảm bảo rằng bạn đã bao gồm thư viện CKEditor và tạo một phần tử HTML với id editor để CKEditor có thể được khởi tạo:

html
Copier
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Your Page Title</title>
    <script src="https://cdn.ckeditor.com/ckeditor5/30.0.0/classic/ckeditor.js"></script>
</head>
<body>
    <textarea id="editor"></textarea>
    <script>
        ClassicEditor
            .create(document.querySelector('#editor'), {
                // Cấu hìnhtải lên hình ảnh
                ckfinder: {
                    uploadUrl: '/ckeditor/upload/'  // Đường dẫn URL đến view Django để xử lý tải lên hình ảnh
                }
            })
            .then(editor => {
                console.log('Editor was initialized', editor);
            })
            .catch(error => {
                console.error(error.stack);
            });
    </script>
</body>
</html>
Trong ví dụ trên, chúng ta đã đảm bảo rằng thư viện CKEditor được bao gồm từ đường dẫn CDN. Đồng thời, chúng ta đã tạo một phần tử <textarea> với id editor để CKEditor có thể được khởi tạo.

Sau khi bạn đã cấu hình và triển khai các bước trên, bạn sẽ có khả năng tải lên hình ảnh từ CKEditor thông qua view Django đã tạo. Hình ảnh sẽ được xử lý và lưu trữ dựa trên cấu hình CDN của bạn và URL của hình ảnh tải lên sẽ được trả về cho CKEditor để hiển thị trong nội dung văn bản.
#############
#################
Lỗi 403
	Lỗi "Forbidden (CSRF token missing or incorrect)" xuất hiện khi Django bảo vệ chống tấn công CSRF (Cross-Site Request Forgery) và không tìm thấy hoặc không chính xác CSRF token trong yêu cầu.

	CSRF token là một giá trị duy nhất được tạo ra bởi Django và được gắn vào mỗi yêu cầu POST để xác thực rằng yêu cầu đó là hợp lệ và không bị tấn công CSRF.

	Để khắc phục lỗi này, bạn có thể áp dụng một trong các phương pháp sau:

	Sử dụng decorators csrf_exempt: Bạn có thể bỏ qua bảo vệ CSRF cho view ckeditor_upload bằng cách sử dụng decorator csrf_exempt. Tuy nhiên, điều này có thể làm giảm mức độ bảo mật của ứng dụng của bạn, nên chỉ sử dụng khi bạn đã có các biện pháp bảo mật khác đáng tin cậy.
	python
	Copier
	from django.views.decorators.csrf import csrf_exempt

	@csrf_exempt
	def ckeditor_upload(request):
		# Code xử lý tải lên hình ảnh
	Đăng ký CSRF token trong yêu cầu: Bạn có thể đăng ký CSRF token trong yêu cầu tải lên bằng cách thêm mã JavaScript vào trang của bạn. Điều này yêu cầu bạn sửa đổi mã JavaScript của CKEditor để gắn kết CSRF token vào yêu cầu tải lên.
	html
	Copier
	<script>
		// Đăng ký CSRF token trong yêu cầu tải lên
		ClassicEditor
			.create(document.querySelector('#editor'), {
				ckfinder: {
					uploadUrl: '/polls/addd/ckeditor/upload/',
					headers: {
						'X-CSRFToken': '{{ csrf_token }}'
					}
				}
			})
			.then(editor => {
				console.log('Editor was initialized', editor);
			})
			.catch(error => {
				console.error(error.stack);
			});
	</script>
	Trong ví dụ trên, {{ csrf_token }} sẽ được thay thế bằng CSRF token cụ thể trong template Django.

	Lưu ý rằng việc sử dụng CSRF token là một biện pháp bảo mật quan trọng để ngăn chặn các cuộc tấn công CSRF. Vì vậy, nếu bạn không sử dụng decorator csrf_exempt, hãy đảm bảo rằng bạn đã áp dụng CSRF token đúng cách trong yêu cầu tải lên.
############//
